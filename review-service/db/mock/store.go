// Code generated by MockGen. DO NOT EDIT.
// Source: review-service/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"
	db "review-service/db/sqlc"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddReviewTx mocks base method.
func (m *MockStore) AddReviewTx(arg0 context.Context, arg1 db.CreateReviewMessageParams) (db.ReviewTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReviewTx", arg0, arg1)
	ret0, _ := ret[0].(db.ReviewTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddReviewTx indicates an expected call of AddReviewTx.
func (mr *MockStoreMockRecorder) AddReviewTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReviewTx", reflect.TypeOf((*MockStore)(nil).AddReviewTx), arg0, arg1)
}

// CreateReview mocks base method.
func (m *MockStore) CreateReview(arg0 context.Context, arg1 db.CreateReviewParams) (db.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", arg0, arg1)
	ret0, _ := ret[0].(db.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockStoreMockRecorder) CreateReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockStore)(nil).CreateReview), arg0, arg1)
}

// CreateReviewMessage mocks base method.
func (m *MockStore) CreateReviewMessage(arg0 context.Context, arg1 db.CreateReviewMessageParams) (db.ReviewMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReviewMessage", arg0, arg1)
	ret0, _ := ret[0].(db.ReviewMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReviewMessage indicates an expected call of CreateReviewMessage.
func (mr *MockStoreMockRecorder) CreateReviewMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReviewMessage", reflect.TypeOf((*MockStore)(nil).CreateReviewMessage), arg0, arg1)
}

// GetReview mocks base method.
func (m *MockStore) GetReview(arg0 context.Context, arg1 uuid.UUID) (db.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReview", arg0, arg1)
	ret0, _ := ret[0].(db.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReview indicates an expected call of GetReview.
func (mr *MockStoreMockRecorder) GetReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReview", reflect.TypeOf((*MockStore)(nil).GetReview), arg0, arg1)
}

// GetReviewByProductID mocks base method.
func (m *MockStore) GetReviewByProductID(arg0 context.Context, arg1 string) (db.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewByProductID", arg0, arg1)
	ret0, _ := ret[0].(db.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewByProductID indicates an expected call of GetReviewByProductID.
func (mr *MockStoreMockRecorder) GetReviewByProductID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewByProductID", reflect.TypeOf((*MockStore)(nil).GetReviewByProductID), arg0, arg1)
}

// GetReviewMessage mocks base method.
func (m *MockStore) GetReviewMessage(arg0 context.Context, arg1 uuid.UUID) (db.ReviewMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewMessage", arg0, arg1)
	ret0, _ := ret[0].(db.ReviewMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewMessage indicates an expected call of GetReviewMessage.
func (mr *MockStoreMockRecorder) GetReviewMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewMessage", reflect.TypeOf((*MockStore)(nil).GetReviewMessage), arg0, arg1)
}

// GetReviewMessages mocks base method.
func (m *MockStore) GetReviewMessages(arg0 context.Context, arg1 uuid.UUID) ([]db.ReviewMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewMessages", arg0, arg1)
	ret0, _ := ret[0].([]db.ReviewMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewMessages indicates an expected call of GetReviewMessages.
func (mr *MockStoreMockRecorder) GetReviewMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewMessages", reflect.TypeOf((*MockStore)(nil).GetReviewMessages), arg0, arg1)
}

// GetReviewMessagesByReview mocks base method.
func (m *MockStore) GetReviewMessagesByReview(arg0 context.Context, arg1 uuid.UUID) ([]db.ReviewMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewMessagesByReview", arg0, arg1)
	ret0, _ := ret[0].([]db.ReviewMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewMessagesByReview indicates an expected call of GetReviewMessagesByReview.
func (mr *MockStoreMockRecorder) GetReviewMessagesByReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewMessagesByReview", reflect.TypeOf((*MockStore)(nil).GetReviewMessagesByReview), arg0, arg1)
}

// ReviewCount mocks base method.
func (m *MockStore) ReviewCount(arg0 context.Context, arg1 uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReviewCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReviewCount indicates an expected call of ReviewCount.
func (mr *MockStoreMockRecorder) ReviewCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReviewCount", reflect.TypeOf((*MockStore)(nil).ReviewCount), arg0, arg1)
}

// UpdateReview mocks base method.
func (m *MockStore) UpdateReview(arg0 context.Context, arg1 db.UpdateReviewParams) (db.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReview", arg0, arg1)
	ret0, _ := ret[0].(db.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReview indicates an expected call of UpdateReview.
func (mr *MockStoreMockRecorder) UpdateReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReview", reflect.TypeOf((*MockStore)(nil).UpdateReview), arg0, arg1)
}

// UpdateReviewMessage mocks base method.
func (m *MockStore) UpdateReviewMessage(arg0 context.Context, arg1 db.UpdateReviewMessageParams) (db.ReviewMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReviewMessage", arg0, arg1)
	ret0, _ := ret[0].(db.ReviewMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReviewMessage indicates an expected call of UpdateReviewMessage.
func (mr *MockStoreMockRecorder) UpdateReviewMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReviewMessage", reflect.TypeOf((*MockStore)(nil).UpdateReviewMessage), arg0, arg1)
}
