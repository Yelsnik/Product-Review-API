// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: review.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createReview = `-- name: CreateReview :one
INSERT INTO reviews (
  product_id, num_of_reviews
) VALUES (
  $1, $2
) RETURNING id, product_id, num_of_reviews
`

type CreateReviewParams struct {
	ProductID    string  `json:"product_id"`
	NumOfReviews float64 `json:"num_of_reviews"`
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRow(ctx, createReview, arg.ProductID, arg.NumOfReviews)
	var i Review
	err := row.Scan(&i.ID, &i.ProductID, &i.NumOfReviews)
	return i, err
}

const getReview = `-- name: GetReview :one
SELECT id, product_id, num_of_reviews FROM reviews
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetReview(ctx context.Context, id uuid.UUID) (Review, error) {
	row := q.db.QueryRow(ctx, getReview, id)
	var i Review
	err := row.Scan(&i.ID, &i.ProductID, &i.NumOfReviews)
	return i, err
}

const getReviewByProductID = `-- name: GetReviewByProductID :one
SELECT id, product_id, num_of_reviews FROM reviews
WHERE product_id = $1 LIMIT 1
`

func (q *Queries) GetReviewByProductID(ctx context.Context, productID string) (Review, error) {
	row := q.db.QueryRow(ctx, getReviewByProductID, productID)
	var i Review
	err := row.Scan(&i.ID, &i.ProductID, &i.NumOfReviews)
	return i, err
}

const updateReview = `-- name: UpdateReview :one
UPDATE reviews
set 
  num_of_reviews = COALESCE($1, num_of_reviews)
WHERE id = $2
RETURNING id, product_id, num_of_reviews
`

type UpdateReviewParams struct {
	NumOfReviews pgtype.Float8 `json:"num_of_reviews"`
	ID           uuid.UUID     `json:"id"`
}

func (q *Queries) UpdateReview(ctx context.Context, arg UpdateReviewParams) (Review, error) {
	row := q.db.QueryRow(ctx, updateReview, arg.NumOfReviews, arg.ID)
	var i Review
	err := row.Scan(&i.ID, &i.ProductID, &i.NumOfReviews)
	return i, err
}
