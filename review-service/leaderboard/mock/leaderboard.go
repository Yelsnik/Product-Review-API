// Code generated by MockGen. DO NOT EDIT.
// Source: review-service/leaderboard (interfaces: Leaderboard)

// Package mocklb is a generated GoMock package.
package mocklb

import (
	context "context"
	reflect "reflect"
	helpers "review-service/helpers"
	leaderboard "review-service/leaderboard"
	review "review-service/review"

	gomock "github.com/golang/mock/gomock"
)

// MockLeaderboard is a mock of Leaderboard interface.
type MockLeaderboard struct {
	ctrl     *gomock.Controller
	recorder *MockLeaderboardMockRecorder
}

// MockLeaderboardMockRecorder is the mock recorder for MockLeaderboard.
type MockLeaderboardMockRecorder struct {
	mock *MockLeaderboard
}

// NewMockLeaderboard creates a new mock instance.
func NewMockLeaderboard(ctrl *gomock.Controller) *MockLeaderboard {
	mock := &MockLeaderboard{ctrl: ctrl}
	mock.recorder = &MockLeaderboardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaderboard) EXPECT() *MockLeaderboardMockRecorder {
	return m.recorder
}

// GetProductdetails mocks base method.
func (m *MockLeaderboard) GetProductdetails(arg0 context.Context, arg1 []leaderboard.LeaderboardEntry, arg2 helpers.Helpers) (*review.GetTop10ProductsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductdetails", arg0, arg1, arg2)
	ret0, _ := ret[0].(*review.GetTop10ProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductdetails indicates an expected call of GetProductdetails.
func (mr *MockLeaderboardMockRecorder) GetProductdetails(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductdetails", reflect.TypeOf((*MockLeaderboard)(nil).GetProductdetails), arg0, arg1, arg2)
}

// GetTopProducts mocks base method.
func (m *MockLeaderboard) GetTopProducts(arg0 context.Context, arg1 int64) ([]leaderboard.LeaderboardEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopProducts", arg0, arg1)
	ret0, _ := ret[0].([]leaderboard.LeaderboardEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopProducts indicates an expected call of GetTopProducts.
func (mr *MockLeaderboardMockRecorder) GetTopProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopProducts", reflect.TypeOf((*MockLeaderboard)(nil).GetTopProducts), arg0, arg1)
}

// UpdateLeaderBoard mocks base method.
func (m *MockLeaderboard) UpdateLeaderBoard(arg0 context.Context, arg1 string, arg2 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLeaderBoard", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLeaderBoard indicates an expected call of UpdateLeaderBoard.
func (mr *MockLeaderboardMockRecorder) UpdateLeaderBoard(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLeaderBoard", reflect.TypeOf((*MockLeaderboard)(nil).UpdateLeaderBoard), arg0, arg1, arg2)
}
