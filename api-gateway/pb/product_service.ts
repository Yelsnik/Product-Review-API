// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.2
// source: product_service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "review";

export interface ProductDetails {
  asin: string;
  productTitle: string;
  productPrice: string;
  productOriginalPrice: string;
  currency: string;
  country: string;
  productUrl: string;
  productPhoto: string;
  productAvailability: string;
}

export interface GetProductDetailsRequest {
  asin: string;
  country: string;
}

export interface GetProductDetailsResponse {
  product: ProductDetails | undefined;
}

export interface Products {
  asin: string;
  productTitle: string;
  productPrice: string;
  productOriginalPrice: string;
  currency: string;
  productUrl: string;
  productPhoto: string;
}

export interface GetProductsRequest {
  page: string;
  country: string;
}

export interface GetProductsResponse {
  product: Products[];
}

export const REVIEW_PACKAGE_NAME = "review";

export interface ProductClient {
  getProductDetails(request: GetProductDetailsRequest): Observable<GetProductDetailsResponse>;

  getProducts(request: GetProductsRequest): Observable<GetProductsResponse>;
}

export interface ProductController {
  getProductDetails(
    request: GetProductDetailsRequest,
  ): Promise<GetProductDetailsResponse> | Observable<GetProductDetailsResponse> | GetProductDetailsResponse;

  getProducts(
    request: GetProductsRequest,
  ): Promise<GetProductsResponse> | Observable<GetProductsResponse> | GetProductsResponse;
}

export function ProductControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getProductDetails", "getProducts"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("Product", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("Product", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCT_SERVICE_NAME = "Product";
